@page "/"
@using System.Timers;
@using KillTheFly.Shared;
@inject HttpClient Http
@inject ILocalStorageService _localstorage;

<PageTitle>KTF</PageTitle>
<img class="banner-photo" src="banner.png"/>

@if(MapSnapshot is null)
{
    <h2>No game in course</h2>
}
else
{
    <div class="score-tray">
        <div class="score-icon">
            <image src="fly-swatter-icon.png" width="30" height="30" />
        </div>
        <div class="score-icon">
            @MapSnapshot.Score
        </div>
        <div class="score-icon">
            <image src="fly-icon.png" width="30" height="30" />
        </div>
        <div class="score-icon">
            @MapSnapshot.Foes
        </div>
        <div class="score-icon">
            <image src="dead-fly-icon.png" width="30" height="30" />
        </div>
        <div class="score-icon">
            @MapSnapshot.TotalKills
        </div>
    </div>
    <div class="grid-container">
        @for(int i = 0; i < MapSnapshot.Map.Count(); i++)
        {
            var representation = MapSnapshot.Map.ElementAt(i);
            var direction = (Directions)i;
            var style = "background-size: cover;";
            if (representation.Avatar != 'W')
            {
                var base64String = $"""data:image/png;base64,{ImageHelper.GetImage($"{representation.X}-{representation.Y}")}""";
                style += $"background-image: url({base64String});";
            }
            <div class="grid-item" id="display" style="@style" @onclick="() => Move(direction)">
                @if(i == 4)
                {
                    var className = $"{Directions.Center} something" + (IsAnimating ? $" animate-{LastDirection}": "");
                    @* <image class="@className" src="fly-swatter-icon.png" /> *@
                    <img class="@className" src="fly-swatter-icon.png" />
                    @* <image class="something" src="fly-swatter-icon.png" /> *@
                }
                @switch(representation.Avatar)
                {
                    case 'Z':
                        <img class="something" src="fly-icon.png"/>
                        break;
                    case 'D':
                        <img class="something"  src="dead-fly-icon.png"/>
                        break;
                    case 'F':
                        <p/>
                        break;
                    case 'W':
                        <div class="map-wall"/>
                        break;
                    default:
                        break;
                }
            </div>
        }
    </div>
    <p>(X, Y): (@(MapSnapshot.Map.ElementAt(4).X), @(MapSnapshot.Map.ElementAt(4).Y))</p>
}


@code {
    const string PLAYER_GUID_STORAGE_KEY = "PlayerGuid";
    [Parameter]
    public string? PlayerGuid { get; set; }
    [Parameter]
    public MapSnapshot? MapSnapshot { get; set; }
    private System.Timers.Timer? timer;

    private bool IsLoading {get; set;} = true;
    private bool IsAnimating {get; set;} = false;
    private Directions LastDirection {get; set;} = Directions.Center;

    protected override async Task OnInitializedAsync()
    {
        if (await _localstorage.ContainKeyAsync(PLAYER_GUID_STORAGE_KEY))
        {
            PlayerGuid = await _localstorage.GetItemAsStringAsync(PLAYER_GUID_STORAGE_KEY);
        } 
        else
        {
            PlayerGuid = Guid.NewGuid().ToString();
            await _localstorage.SetItemAsStringAsync(PLAYER_GUID_STORAGE_KEY, PlayerGuid);
        }

        await Http.PostAsJsonAsync<object>($"Game/Register/{PlayerGuid}", new { });
        timer = new System.Timers.Timer(1200);
        timer.Elapsed += UpdateMap;
        timer.Start();
    }
    private async Task RefreshSnapshot()
    {
        MapSnapshot = await Http.GetFromJsonAsync<MapSnapshot>($"Game/Map/{PlayerGuid}");
        IsLoading = false;
        IsAnimating = false;
        StateHasChanged();
    }

    public async Task Move(Directions direction)
    {
        if(IsLoading)
        {
            return;
        }
        IsLoading = true;
        IsAnimating = true;
        LastDirection = direction;
        await Http.PostAsJsonAsync<object>($"Game/Move/{PlayerGuid}/{direction}", new { });
        await RefreshSnapshot();
    }

    public async void UpdateMap(object? sender, ElapsedEventArgs e)
    {
        await RefreshSnapshot();
    }
}
